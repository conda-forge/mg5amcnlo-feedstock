schema_version: 1

context:
  name: mg5amcnlo
  version: "3.5.7"

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  - url: https://github.com/hep-packaging-coordination/mg5amcnlo-release-mirror/releases/download/${{ version }}/MG5_aMC_v${{ version }}.tar.gz
    sha256: ca3e027f078438318bd4143a102aebc2d51358f537b5d52bbc574fe49a6a901e
    target_directory: source
    patches:
      # c.f. https://github.com/conda-forge/mg5amcnlo-feedstock/issues/12
      - remove-cuttools-compiler-requirement.patch
      - add-libtirpc-to-nlo-extralibs-for-xdr.patch

build:
  # FIXME: mg5amcnlo doesn't support Python 3.12 yet
  number: 6
  skip: match(python, "<3.7") or match(python, ">3.11") or win
  script:
    # Remove unnecessary files
    - rm -r source/.github
    - rm -r source/tests
    - rm source/.bzrignore
    - rm source/.gitignore
    - rm source/code-notes
    - rm source/README
    - rm source/UpdateNotes.txt
    # FIXME: Remove prebuilt binary added in tarball
    - rm source/vendor/DiscreteSampler/check

    # Fix bugs
    # FIXME: Use user space perl instead of system perl
    - find source -type f -exec grep -Il '#!/usr/bin/perl -w' {} + | xargs sed -i 's|#!/usr/bin/perl -w|#!/usr/bin/env perl\nuse warnings;|g'

    # Need to use -a to preserve symlinks
    - cp -a source $PREFIX/MG5_aMC

    # TODO: Use packaged versions of vendored code (CutTools, StdHEP)
    # For now, compile the vendored CutTools
    # c.f. https://github.com/conda-forge/mg5amcnlo-feedstock/issues/3#issuecomment-2660481386
    # Provides $PREFIX/MG5_aMC/vendor/CutTools/includects/libcts.a
    - cd $PREFIX/MG5_aMC/vendor/CutTools
    - echo -e "\n# Compiling CutTools"
    # c.f. https://github.com/mg5amcnlo/mg5amcnlo/blob/3d6799de1bcabee5173e8a3711f657a5cd5940cf/Template/NLO/Source/makefile#L73
    - make FC=$FC FFLAGS="-fPIC -fno-automatic -O2 -funroll-all-loops $FFLAGS"
    # Running 'make clean' deletes the files we want, so manually clean up
    - find . -name "*.o" -exec rm {} +
    - cd -

    ## IREGI
    # TODO: Compare https://github.com/mg5amcnlo/mg5amcnlo/blob/3.x/vendor/IREGI/src/oneloop/avh_olo_foriregi.f90 against avh_olo.f90 in oneloop
    - rm -rf $PREFIX/MG5_aMC/vendor/IREGI
    - mkdir -p $PREFIX/MG5_aMC/vendor/IREGI/src
    - ln -s $PREFIX/lib/libiregi.a $PREFIX/MG5_aMC/vendor/IREGI/src/
    - for file in $PREFIX/include/iregi/*; do ln -s "$file" $PREFIX/MG5_aMC/vendor/IREGI/src/; done
    - mkdir -p $PREFIX/MG5_aMC/vendor/IREGI/src/qcdloop/ff
    - ln -s $PREFIX/lib/libff.a $PREFIX/MG5_aMC/vendor/IREGI/src/qcdloop/ff/
    - mkdir -p $PREFIX/MG5_aMC/vendor/IREGI/src/qcdloop/ql
    - ln -s $PREFIX/lib/libqcdloop.a $PREFIX/MG5_aMC/vendor/IREGI/src/qcdloop/ql/

    # Compile the vendored StdHEP
    # TODO: Package this (https://github.com/conda-forge/staged-recipes/pull/29118)
    - cd $PREFIX/MG5_aMC/vendor/StdHEP
    # Patch makefile to ensure conda-forge FFLAGS and CFLAGS are used
    - sed -i "s|FFLAGS += -std=legacy|FFLAGS += -std=legacy -ffixed-line-length-none $FFLAGS|g" makefile
    - sed -i "s|CFLAGS += -Wno-implicit-function-declaration|CFLAGS += -Wno-implicit-function-declaration $CFLAGS|g" makefile
    - echo -e "\n# Compiling StdHEP"
    # c.f. https://github.com/mg5amcnlo/mg5amcnlo/blob/3d6799de1bcabee5173e8a3711f657a5cd5940cf/Template/NLO/Source/makefile#L84
    - make all FC=$FC F77=$FC CC=$CC --jobs=$CPU_COUNT
    - make clean
    - cd -

    # Symlink libraries to HEPTools/ directory tree as mg5amcnlo looks there
    - mkdir -p $PREFIX/MG5_aMC/HEPTools/lib
    - mkdir -p $PREFIX/MG5_aMC/HEPTools/include
    ## OneLOop
    - mkdir -p $PREFIX/MG5_aMC/HEPTools/oneloop
    - echo -e "\n# Symlinking OneLOop"
    - ln -s $PREFIX/lib/libavh_olo.a $PREFIX/MG5_aMC/HEPTools/oneloop/
    - ln -s $PREFIX/lib/libavh_olo.a $PREFIX/MG5_aMC/HEPTools/lib/
    - for file in $PREFIX/include/oneloop/*; do ln -s "$file" $PREFIX/MG5_aMC/HEPTools/oneloop/; ln -s "$file" $PREFIX/MG5_aMC/HEPTools/include/; done

    - if: (linux and (x86_64 or ppc64le))
      then:
        ## Ninja
        - mkdir -p $PREFIX/MG5_aMC/HEPTools/bin
        - mkdir -p $PREFIX/MG5_aMC/HEPTools/ninja/lib
        - mkdir -p $PREFIX/MG5_aMC/HEPTools/ninja/include
        - mkdir -p $PREFIX/MG5_aMC/HEPTools/ninja/bin
        - echo -e "\n# Symlinking Ninja"
        ### Ninja libs
        - ln -s $PREFIX/lib/libninja.a $PREFIX/MG5_aMC/HEPTools/ninja/lib/
        - ln -s $PREFIX/lib/libninja.a $PREFIX/MG5_aMC/HEPTools/lib/
        ### Ninja includes
        - ln -s $PREFIX/include/mninja.mod $PREFIX/MG5_aMC/HEPTools/ninja/include/
        - ln -s $PREFIX/include/ninjago_module.mod $PREFIX/MG5_aMC/HEPTools/ninja/include/
        - ln -s $PREFIX/include/ninjavholo.mod $PREFIX/MG5_aMC/HEPTools/ninja/include/
        - ln -s $PREFIX/include/ninja $PREFIX/MG5_aMC/HEPTools/ninja/include/ninja
        - ln -s $PREFIX/include/quadninja $PREFIX/MG5_aMC/HEPTools/ninja/include/quadninja
        - for file in $PREFIX/MG5_aMC/HEPTools/ninja/include/*.mod; do ln -s "$file" $PREFIX/MG5_aMC/HEPTools/include/; done
        - ln -s $PREFIX/MG5_aMC/HEPTools/ninja/include/ninja $PREFIX/MG5_aMC/HEPTools/include/ninja
        - ln -s $PREFIX/MG5_aMC/HEPTools/ninja/include/quadninja $PREFIX/MG5_aMC/HEPTools/include/quadninja
        ### Ninja bins
        - ln -s $PREFIX/bin/ninja-config $PREFIX/MG5_aMC/HEPTools/ninja/bin/
        - ln -s $PREFIX/bin/ninja-config $PREFIX/MG5_aMC/HEPTools/bin/

    ## Collier
    - mkdir -p $PREFIX/MG5_aMC/HEPTools/collier/include
    - echo -e "\n# Symlinking Collier"
    - ln -s $PREFIX/lib/libcollier.a $PREFIX/MG5_aMC/HEPTools/collier/
    - ln -s $PREFIX/lib/libcollier.a $PREFIX/MG5_aMC/HEPTools/lib/
    - ln -s $PREFIX/include/collier.mod $PREFIX/MG5_aMC/HEPTools/collier/include/
    - ln -s $PREFIX/include/collier.mod $PREFIX/MG5_aMC/HEPTools/include/

    # Build configuration file be replacing placeholder values with PREFIX
    - echo -e "\n# Configuring $PREFIX/MG5_aMC/input/mg5_configuration.txt"
    - cp $RECIPE_DIR/mg5_configuration.txt .
    - sed -i "s|REPLACE_WITH_PREFIX|$PREFIX|g" mg5_configuration.txt
    - sed -i "s|REPLACE_WITH_BASENAME_FC|$(basename $FC)|g" mg5_configuration.txt
    - sed -i "s|REPLACE_WITH_BASENAME_GXX|$(basename $GXX)|g" mg5_configuration.txt
    # c.f. https://github.com/conda-forge/mg5amcnlo-feedstock/issues/13
    - sed -i "s|# automatic_html_opening = True|automatic_html_opening = False|g" mg5_configuration.txt
    # Ninja settings in mg5_configuration.txt
    - if: (linux and (x86_64 or ppc64le))
      then: sed -i '/ninja =/s/^# //g' mg5_configuration.txt
    - mv mg5_configuration.txt $PREFIX/MG5_aMC/input/mg5_configuration.txt

    # Setup links
    - mkdir -p $PREFIX/bin
    - ln -s $PREFIX/MG5_aMC/bin/mg5_aMC $PREFIX/bin/mg5_aMC
    - mkdir -p $PREFIX/share/mg5_aMC
    - ln -s $PREFIX/MG5_aMC/proc_card.dat $PREFIX/share/mg5_aMC/proc_card.dat

    # Copy activate and deactivate scripts
    # The scripts are executed in lexicographical order, so use zzz- to ensure
    # last to manipulate FFLAGS (lowercase letters have highest value)
    - mkdir -p $PREFIX/etc/conda/activate.d
    - cp "${RECIPE_DIR}/activate.sh" "${PREFIX}/etc/conda/activate.d/zzz-${PKG_NAME}-activate.sh"
    - cp "${RECIPE_DIR}/activate.csh" "${PREFIX}/etc/conda/activate.d/zzz-${PKG_NAME}-activate.csh"
    - cp "${RECIPE_DIR}/activate.fish" "${PREFIX}/etc/conda/activate.d/zzz-${PKG_NAME}-activate.fish"

    - mkdir -p $PREFIX/etc/conda/deactivate.d
    - cp "${RECIPE_DIR}/deactivate.sh" "${PREFIX}/etc/conda/deactivate.d/zzz-${PKG_NAME}-deactivate.sh"
    - cp "${RECIPE_DIR}/deactivate.csh" "${PREFIX}/etc/conda/deactivate.d/zzz-${PKG_NAME}-deactivate.csh"
    - cp "${RECIPE_DIR}/deactivate.fish" "${PREFIX}/etc/conda/deactivate.d/zzz-${PKG_NAME}-deactivate.fish"
    - ls -lhtra $PREFIX/etc/conda/activate.d/
    - ls -lhtra $PREFIX/etc/conda/deactivate.d/

    # Generate initial files
    # conda-build intentionally compiles .pyc files, so keep those.
    # c.f. https://docs.conda.io/projects/conda-build/en/stable/resources/define-metadata.html#skip-compiling-some-py-files-into-pyc-files
    - echo "exit" | mg5_aMC

requirements:
  build:
    - ${{ stdlib('c') }}
    # Compilers needed to set names in mg5_configuration.txt and will be
    # used in the future along with make
    - ${{ compiler('cxx') }}
    - ${{ compiler('fortran') }}
    - make
    - if: build_platform != target_platform
      then:
        # Need cross-python to be able to use Python libraries
        - cross-python_${{ target_platform }}
        - python
    - sed
    - grep
  host:
    - python
    - six
    - ply
    - fastjet-cxx
    - emela
    - lhapdf
    # Provide targets for symlink
    - oneloop-static
    - iregi-static 1.1.0.*
    - qcdloop-fortran-static
    # HEPTools
    - if: linux and (x86_64 or ppc64le)
      then: ninja-hep-ph-static 1.1.*
    - collier-static
    - hepmc2
    - hepmc3
  run:
    # mg5amcnlo is a code generator and so requires a build system at runtime
    - cxx-compiler
    - fortran-compiler
    - make
    - tar
    - wget  # for import_model_from_db in models/import_ufo.py
    - curl  # for import_model_from_db in models/import_ufo.py
    - perl
    - python
    - six
    - numpy
    - fastjet-contrib
    - emela
    - lhapdf
    - ply
    - bc  # Needed to run showering
    # MG5_aMC/vendor/ libraries
    - oneloop-static
    - iregi-static 1.1.0.*
    - qcdloop-fortran-static
    - libtirpc  # Needed for XDR library symbols used by StdHEP for NLO
    # HEPTools
    # ninja-hep-ph uses libquadmath and so does not support macOS or aarch64
    # mg5amcnlo v3.5.7 requires ninja-hep-ph v1.1.0 and will fail to compile
    # for ninja-hep-ph v1.2.0
    - if: linux and (x86_64 or ppc64le)
      then: ninja-hep-ph-static 1.1.*
    - collier-static
    # c.f. https://github.com/conda-forge/mg5amcnlo-pythia8-interface-feedstock/issues/2
    - if: not (osx and x86_64)
      then: mg5amcnlo-pythia8-interface
    - hepmc2
    - hepmc3
    - ghostscript
    - gnuplot

tests:
  - package_contents:
      files:
        - MG5_aMC/aloha/*
        - MG5_aMC/bin/*
        - MG5_aMC/HELAS/*
        - MG5_aMC/input/*
        - MG5_aMC/madgraph/*
        - MG5_aMC/MadSpin/*
        - MG5_aMC/mg5decay/*
        - MG5_aMC/models/*
        - MG5_aMC/PLUGIN/*
        - MG5_aMC/Template/*
        - MG5_aMC/vendor/*

        - MG5_aMC/proc_card.dat
        - MG5_aMC/VERSION
        - MG5_aMC/input/mg5_configuration.txt
        - MG5_aMC/madgraph/LICENSE

        # Check vendored libraries got built
        - MG5_aMC/vendor/CutTools/includects/libcts.a

        - MG5_aMC/vendor/IREGI/src/libiregi.a
        - MG5_aMC/vendor/IREGI/src/qcdloop/ff/libff.a
        - MG5_aMC/vendor/IREGI/src/qcdloop/ql/libqcdloop.a

        - MG5_aMC/vendor/StdHEP/lib/libstdhep.a
        - MG5_aMC/vendor/StdHEP/lib/libstdhepC.a
        - MG5_aMC/vendor/StdHEP/lib/libFmcfio.a
      bin:
        - mg5_aMC
  - files:
      recipe:
        - tutorial.mg5
        - tutorial_amc-at-nlo.mg5
    script:
      - echo -e "\n# Checking mg5_configuration.txt"
      - cat $PREFIX/MG5_aMC/input/mg5_configuration.txt

      - mg5_aMC --help

      - echo "exit" | mg5_aMC

      # Download NNPDF23_lo_as_0130_qed in advance to avoid long output in CI logs
      # Somehow downloading in advance causes a compilation error on x86 Linux only in CI
      - lhapdf install NNPDF23_lo_as_0130_qed &> download_log.txt

      - echo -e "\n# Running tutorial.mg5"
      - mg5_aMC ./tutorial.mg5
      - ls -lhtra
      # c.f. https://github.com/mg5amcnlo/mg5amcnlo/issues/194
      - test ! -f ME5_debug

      - if: build_platform == target_platform
        then:
          - lhapdf install NNPDF23_nlo_as_0119_qed &> download_log.txt
          - echo -e "\n# Running tutorial_amc-at-nlo.mg5"
          - mg5_aMC ./tutorial_amc-at-nlo.mg5
          - ls -lhtra
          # c.f. https://github.com/conda-forge/mg5amcnlo-feedstock/issues/3
          - test ! -f ME5_debug

about:
  summary: MadGraph5_aMC@NLO
  description: |
    MadGraph5_aMC@NLO is a framework that aims at providing all the elements
    necessary for SM and BSM phenomenology, such as the computations of cross
    sections, the generation of hard events and their matching with event
    generators, and the use of a variety of tools relevant to event manipulation
    and analysis.
    Processes can be simulated to LO accuracy for any user-defined Lagrangian,
    and the NLO accuracy in the case of models that support this kind of calculations
    &mdash; prominent among these are QCD and EW corrections to SM processes.
    Matrix elements at the tree- and one-loop-level can also be obtained.

    MadGraph5_aMC@NLO is the new version of both MadGraph5 and aMC@NLO that unifies
    the LO and NLO lines of development of automated tools within the MadGraph family.
    As such, the code allows one to simulate processes in virtually all configurations
    of interest, in particular for hadronic and e+e- colliders; starting from version
    3.2.0, the latter include Initial State Radiation and beamstrahlung effects.
  # modified University of Illinois/NCSA license
  license: LicenseRef-NCSA
  license_file: source/LICENSE
  homepage: https://github.com/mg5amcnlo/mg5amcnlo
  repository: https://github.com/mg5amcnlo/mg5amcnlo

extra:
  recipe-maintainers:
    - matthewfeickert
